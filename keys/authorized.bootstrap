#!/usr/bin/env zsh

zmodload -ap zsh/mapfile mapfile

function {
  local file="$HOME/.ssh/authorized_keys"
  local action keep_all=false discard_all=false discard

  local data hex key fingerprint comment
  local -aU existing_keys

  local -A keys
  # key:   "<key>"
  # value: "<message> key <fingerprint> <comment>"

  existing_keys=(${(f)mapfile[$file]})

  for key ($DOTFILES_PATH/keys/*.key(N)); do
    data=(${(f)mapfile[$key]})

    if [[ $#data -gt 1 ]]; then
      fail "'$key' contains more than one key"
      return $?
    fi

    hex="${data%%=*\ *}"
    comment="${data#*=*\ }"
    ssh-keygen -lf =(echo "$data") >>&/dev/null

    if [[ $? -ne 0 ]]; then
      warning "'$key' does not contain a valid key"
      continue
    fi

    if [[ ${existing_keys[(i)$hex*]} -le $#existing_keys ]]; then
      keys[$data]="skipped key $comment"
      existing_keys=("${(@)existing_keys:#$hex*}")
    else
      keys[$data]="added key $comment"
    fi
  done

  # keys that don't have a corresponding .key file
  for key in $existing_keys; do
    discard=

    comment="${key#*=*\ }"

    fingerprint="${${$(ssh-keygen -lf =(echo "$key") 2>/dev/null)#*\ }%%\ *}"

    if [[ $? -ne 0 ]]; then
      success "discarded invalid key '${comment:-$key}'"
    else
      if [[ "$keep_all" == "false" && "$discard_all" == "false" ]]; then
        action=

        user "Key was not found in repository: $fingerprint $comment, what do you want to do? [k]eep, [K]eep all, [d]iscard, [D]iscard all?"
        while [[ "$action" == "" ]]; do
          read -s -k 1 "action"

          case "$action" in
            k)
              ;; # dual options means only discard needs to be tracked
            K)
              keep_all="true";;
            d)
              discard="true";;
            D)
              discard_all="true";;
            *)
              action="";;
          esac
        done
      fi

      discard=${discard:-$discard_all}

      if [[ "$discard" == "true" ]]; then
        success "discarded key '$comment'"
      else
        keys[$key]="kept key '$comment'"
      fi
    fi

    existing_keys=("${(@)existing_keys:#${key%%=*\ *}*}")
  done

  echo -n >| $file
  for key in ${(@k)keys}; do
    echo $key >> $file
    status $? $keys[$key]
  done
}
