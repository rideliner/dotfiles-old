#!/usr/bin/env zsh

function {
  function resolve() {
    eval "$1=\"${${${(P)1/\?/$2}/\!/$3}/\~/$HOME}\""
  }

  local mod mods src dst link dir name
  local overwrite backup skip action
  local overwrite_all=false backup_all=false skip_all=false

  getModulesResolved mods

  for src ($DOTFILES_PATH/${^mods}/*.symlink(N)); do
    mod=${src:h:t}
    link=${src:t:r}

    if ! zstyle -T ":ride:${mod}:symlink:${link}" path; then
      zstyle -s ":ride:${mod}:symlink:${link}" path dir
    else
      dir="~"
    fi

    if ! zstyle -T ":ride:${mod}:symlink:${link}" name; then
      zstyle -s ":ride:${mod}:symlink:${link}" name name
    else
      name=".?"
    fi

    resolve dir $link $mod
    resolve name $link $mod

    dst="$dir/$name"
    dst=$dst:a

    overwrite=
    backup=
    skip=

    if [[ ! -e "${dst:h}" ]]; then
      # base directory doesn't exist
      user "Directory doesn't exist: ${dst:h}, do you want to create it? [Y/N]"
      while [[ "$action" == "" ]]; do
        read -s -k 1 "action"

        case "$action" in
          n | N )
            fail "skipped ${dst} because you chose not to create the directory for it."
            action='skip'
            ;;
          y | Y )
            mkdir -p "${dst:h}"
            ;;
          * )
            action="";;
        esac
      done

      if [[ "$action" == 'skip' ]]; then
        continue;
      fi
    elif [[ ! -d "${dst:h}" ]]; then
      # base "directory" isn't a directory
      fail "${dst:h} exists, but is not a directory. Cannot create a symlink at $dst."
      return $?
    elif [[ -f "$dst" || -d "$dst" || -L "$dst" ]]; then
      if [[ "${dst:A}" == "$src" ]]; then
        skip="true"
      elif [[ "$overwrite_all" == "false" && "$backup_all" == "false" && "$skip_all" == "false" ]]; then
        action=

        user "File already exists: ${dst}, what do you want to do? [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
        while [[ "$action" == "" ]]; do
          read -s -k 1 "action"

          case "$action" in
            o )
              overwrite="true";;
            O )
              overwrite_all="true";;
            b )
              backup="true";;
            B )
              backup_all="true";;
            s )
              skip="true";;
            S )
              skip_all="true";;
            * )
              action="";;
          esac
        done
      fi

      overwrite=${overwrite:-$overwrite_all}
      backup=${backup:-$backup_all}
      skip=${skip:-$skip_all}

      if [[ "$skip" == "true" ]]; then
        success "skipped ${src#$DOTFILES_PATH/}"
      elif [[ "$backup" == "true" ]]; then
        mv "$dst" "${dst}.backup"
        status $? "moved $dst to ${dst}.backup"
      elif [[ "$overwrite" == "true" ]]; then
        rm -rf "$dst"
        status $? "removed $dst"
      fi
    fi

    if [[ "$skip" != "true" ]]; then  # "false" or empty
      ln -s "$src" "$dst"
      status $? "linked ${src#$DOTFILES_PATH/} to $dst"
    fi
  done
}
